           # "Hand-defined" states
    ###################################################################
    # def state_1(self): return equiv( S1(self.t), ~percept_open_left_block(self.t) & percept_open_right_block(self.t))
    def state_1(self,time): return expr(~percept_open_left_block(self.t) & percept_open_right_block(self.t))
    # def state_2(self): return equiv( S2(self.t), percept_open_left_block(self.t) & percept_open_right_block(self.t))
    def state_2(self,time): return (percept_open_left_block(self.t) & percept_open_right_block(self.t))
    # def state_3(self,time): return (percept_open_left_block(self.t) & percept_open_right_block(self.t))
    # def state_4(self): return equiv( S4(self.t), percept_open_left_block(self.t) & ~percept_open_right_block(self.t))
    def state_3(self,time): return (percept_open_left_block(self.t) & ~percept_open_right_block(self.t))
    ###################################################################



        # if self.ask_if_true_dpll( self.state_1() |'==>'| ~percept_open_left_block(self.t) & percept_open_right_block(self.t)) == False:
        if self.ask_if_true_dpll( self.state_1(self.t) ) == False:
            print("Agent in State 1")
            self.kb_actions_percepts.tell( S1(self.t)  )
  
        # if self.ask_if_true_dpll( self.state_2() |'==>'| percept_open_left_block(self.t) & percept_open_right_block(self.t)) == False:
        if self.ask_if_true_dpll( self.state_2(self.t) ) == False:
            print("Agent in State 2")
            self.kb_actions_percepts.tell( S2(self.t)  )
        
        # # if self.ask_if_true_dpll( self.state_3() |'==>'| percept_open_left_block(self.t) & percept_open_right_block(self.t)) == False:
        # if self.ask_if_true_dpll( self.state_3(self.t) ) == False:
        #     print("Agent in State 3")
        #     self.kb.tell( S3(self.t)  )
            
        # if self.ask_if_true_dpll( self.state_4() |'==>'| percept_open_left_block(self.t) & ~percept_open_right_block(self.t)) == False:
        if self.ask_if_true_dpll( self.state_3(self.t) ) == False:
            print("Agent in State 3"
            self.kb_actions_percepts.tell( S3(self.t)  )




                    # remove repeated states from state_KB irrepective of time
        # Make a SATPLAN to inprove inference time becuse the agent will know to skip certain sattes
        
        # create state model with propositional logic
        # state=combine(percept,action)
        # if(self.ask_if_true_dpll(state) != False): # Ask the main KB
        #     self.state_kb.tell(return_nth_state() |'==>'| state_sentence_in_PL)  # Tell the state to the the state KB
        # if(self.ask_if_true_dpll(state) == False): # If entailed, then don't bother
        #     pass  
        
        # Now get the inference procedure for kbnowing which state you are in based on whatn you have in the state KB
        # After that you can create links between states.
            
        # Change to self.ask_if_true_dpll( What does the combination of percepts now tell me abput whihc state I am in om the state KB ) == False:
        
        # ask what state the agent is in




        # Read index values from State to State
        # Store the index of the last state_def_capture_refined sentencebeing used
        
        # self.g = Graph([(0,1), (1,1), (0,2), (2,0), (2,3), (3,4), (4,4), (4,2), (2,5), (5,0), (6,3), (5,6)], directed=True)
        # self.g = Graph([], directed=True)
        # self.g.vs["name"] = ["State_0", "State_1", "State_2", "State_3", "State_4", "State_5", "State_6"]
        # self.g.vs["age"] = [25, 31, 18, 47, 22, 23, 50]
        # self.g.vs["gender"] = ["f", "m", "f", "m", "f", "m", "m"]
        # self.g.es["is_formal"] = [False, False, True, True, True, False, True, False, False]
        # self.g.vs["label"] = self.g.vs["name"] #assign each node label to the name
        # self.g.es["label"] = ["ML", "MR", "MU", "MD", "MB"] #assign each node label to the name
        # self.g.es["label"] = ["A", "B", "C"] #assign each node label to the name

        